import random
import tkinter as tk
from tkinter import messagebox

# Shark name | family | order | year discovered
sharks = [
    {"name": "southern african filled shark", "family": "Chlamydoselachidae", "order": "hexanchiformes", "year": 1899},
    {"name": "frilled shark", "family": "Chlamydoselachidae", "order": "hexanchiformes", "year": 1884},
    {"name": "sharp-nose seven-gill shark", "family": "Hexanchidae", "order": "hexanchiformes", "year": 1962},
    {"name": "blunt-nose six-gill shark", "family": "Hexanchidae", "order": "hexanchiformes", "year": 1788},
    {"name": "big-eyed six-gill shark", "family": "Hexanchidae", "order": "hexanchiformes", "year": 1969},
    {"name": "atlantic six-gill shark", "family": "Hexanchidae", "order": "hexanchiformes", "year": 2018},
    {"name": "broad-nose seven-gill shark", "family": "Hexanchidae", "order": "hexanchiformes", "year": 1788},
    {"name": "dwarf gulper shark", "family": "Centrophoridae", "order": "squaliformes", "year": 1913},
    {"name": "gulper shark", "family": "Centrophoridae", "order": "squaliformes", "year": 1801},
    {"name": "dumb gulper shark", "family": "Centrophoridae", "order": "squaliformes", "year": 1915},
    {"name": "small-fin gulper shark", "family": "Centrophoridae", "order": "squaliformes", "year": 1860},
    {"name": "seychelles gulper shark", "family": "Centrophoridae", "order": "squaliformes", "year": 2003},
    {"name": "leaf-scale gulper shark", "family": "Centrophoridae", "order": "squaliformes", "year": 1788},
]

class SharkGuessingGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Sharkdle")
        self.game_running = False
        self.random_shark = None
        self.guess_count = 0
        self.guesses = []

        # Set a fixed window size
        self.root.geometry("600x400")
        self.root.resizable(False, False)  # Prevent resizing

        # Setup the GUI
        self.setup_gui()

    def setup_gui(self):
        # Title Label
        self.info_label = tk.Label(self.root, text="Welcome to sharkdle!", font=("Arial", 14))
        self.info_label.pack(pady=10)

        # Entry for guess
        self.guess_label = tk.Label(self.root, text="Enter a shark:", font=("Arial", 12))
        self.guess_label.pack()

        self.guess_entry = tk.Entry(self.root, font=("Arial", 12))
        self.guess_entry.pack(pady=10)

        self.guess_button = tk.Button(self.root, text="Guess", font=("Arial", 12), command=self.check_guess)
        self.guess_button.pack(pady=10)

        # Frame for displaying previous guesses
        self.guess_frame = tk.Frame(self.root)
        self.guess_frame.pack(pady=10)

        # "How to Play" button
        self.how_to_play_button = tk.Button(self.root, text="How to Play", font=("Arial", 12), command=self.show_instructions)
        self.how_to_play_button.pack(pady=10)

        # Start the game automatically on launch
        self.start_game()

    def start_game(self):
        """Start a new game by selecting a random shark and resetting the game state."""
        self.random_shark = random.choice(sharks)  # Pick a random shark immediately
        self.game_running = True
        self.guess_count = 0
        self.guesses = []
        self.info_label.config(text="Start guessing the shark name. Good luck!")
        self.guess_entry.delete(0, tk.END)

        # Clear previous guesses display
        for widget in self.guess_frame.winfo_children():
            widget.destroy()

    def check_guess(self):
        """Check the player's guess and provide feedback."""
        if not self.game_running:
            messagebox.showinfo("Game Not Started", "Press 'Start New Game' to begin playing!")
            return

        if self.guess_count >= 5:
            messagebox.showinfo("Game Over", "You have reached the maximum number of guesses. You lost!")
            self.game_running = False
            return

        user_guess = self.guess_entry.get().strip().lower()
        if user_guess == "":
            messagebox.showwarning("Empty Guess", "Please enter a guess!")
            return

        self.guess_count += 1
        guessed_shark = next((shark for shark in sharks if shark["name"].lower() == user_guess), None)

        if guessed_shark:
            # Evaluate the guess
            family_color = "red"
            order_color = "red"
            year_feedback = "red"
            year_message = ""
            name_color = "red"

            if guessed_shark["name"].lower() == self.random_shark["name"].lower():
                family_color = order_color = year_feedback = "green"
                year_message = f"{self.random_shark['year']} (Correct!)"
                name_color = "green"
                self.game_running = False  # End the game if guessed correctly
                messagebox.showinfo("You Win!", f"You guessed the correct shark: {self.random_shark['name'].capitalize()}!")
            else:
                if guessed_shark["family"] == self.random_shark["family"]:
                    family_color = "green"
                if guessed_shark["order"] == self.random_shark["order"]:
                    order_color = "green"

                # Year feedback
                if guessed_shark["year"] < self.random_shark["year"]:
                    year_feedback = "red"  # Too early
                    year_message = f"{guessed_shark['year']} (Later)"
                elif guessed_shark["year"] > self.random_shark["year"]:
                    year_feedback = "blue"  # Too late
                    year_message = f"{guessed_shark['year']} (Earlier)"
                else:
                    year_feedback = "green"
                    year_message = f"{self.random_shark['year']} (Correct!)"

            # Display the guess with colored feedback
            self.display_previous_guess(guessed_shark, family_color, order_color, year_feedback, year_message, name_color)

        else:
            messagebox.showinfo("Not a valid shark", "No shark with that name exists in the list. Try again!")
        self.guess_entry.delete(0, tk.END)

    def display_previous_guess(self, guessed_shark, family_color, order_color, year_feedback, year_message, name_color):
        """Display previous guesses with color-coded feedback."""
        row = self.guess_count - 1  # Correctly track the row for each guess

        # Display guessed shark name with color (red or green)
        guess_label = tk.Label(self.guess_frame, text=f"Guess {self.guess_count}: {guessed_shark['name'].capitalize()}", font=("Arial", 12), fg=name_color)
        guess_label.grid(row=row, column=0, padx=10, pady=5)

        # Display guessed family, order, and year values with colored feedback
        family_label = tk.Label(self.guess_frame, text=guessed_shark["family"], font=("Arial", 12), fg=family_color)
        family_label.grid(row=row, column=1, padx=10, pady=5)

        order_label = tk.Label(self.guess_frame, text=guessed_shark["order"], font=("Arial", 12), fg=order_color)
        order_label.grid(row=row, column=2, padx=10, pady=5)

        year_label = tk.Label(self.guess_frame, text=year_message, font=("Arial", 12), fg=year_feedback)
        year_label.grid(row=row, column=3, padx=10, pady=5)

        if self.guess_count == 5 and self.game_running:
            messagebox.showinfo("Game Over", "You have reached the maximum number of guesses. You lost!")
            self.game_running = False

    def show_instructions(self):
        """Show the instructions in a dialog box."""
        instructions = (
            "How to Play:\n\n"
            "1. The game will choose a random shark.\n"
            "2. Your task is to guess the name of the shark.\n"
            "3. After each guess, you'll receive feedback:\n"
            "   - Green: Correct information (Family/Order/Year)\n"
            "   - Red: Incorrect information\n"
            "4. You have 5 guesses to try and get the correct shark.\n"
            "5. Try to guess the shark correctly in as few attempts as possible!\n"
        )
        messagebox.showinfo("How to Play", instructions)


if __name__ == "__main__":
    # Create the main window and start the game
    root = tk.Tk()
    game = SharkGuessingGame(root)
    root.mainloop()